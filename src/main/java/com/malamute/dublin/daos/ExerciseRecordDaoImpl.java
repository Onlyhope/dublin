package com.malamute.dublin.daos;

import com.malamute.dublin.entities.ExerciseRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.*;
import java.util.List;

/**
 * Resource: https://www.journaldev.com/2593/spring-jdbc-example#spring-jdbc-dependencies
 */
@Repository
public class ExerciseRecordDaoImpl implements ExerciseRecordDao {

    private final Logger log = LoggerFactory.getLogger(ExerciseRecordDaoImpl.class);

    @Autowired
    private DataSource dataSource; // TODO - Delete later
    private final JdbcTemplate jdbcTemplate;

    @Autowired
    ExerciseRecordDaoImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

//    @Override
//    public ExerciseRecord save(ExerciseRecord exerciseRecord)  {
//
//        String query = "insert into exercise_record (exercise_name, created_date, completed_date) values (?, ?, ?)";
//        Object[] args = new Object[]{
//                exerciseRecord.getExerciseName(),
//                exerciseRecord.getCreatedDate(),
//                exerciseRecord.getCompletedDate()
//        };
//        int status = jdbcTemplate.update(query, args);
//
//        if (status == 0) return null;
//
//        return exerciseRecord;
//    }

    @Override
    public ExerciseRecord save(ExerciseRecord exerciseRecord) {

        String query = "insert into exercise_record (exercise_name, created_date, completed_date) values (?, ?, ?)";

        Connection con = null;
        PreparedStatement ps = null;

        try {
            con = dataSource.getConnection();
            ps = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, exerciseRecord.getExerciseName());
            ps.setTimestamp(2, exerciseRecord.getCreatedDate());
            ps.setTimestamp(3, exerciseRecord.getCompletedDate());
            int status = ps.executeUpdate();

            if (status == 0) { throw new SQLException("Error saving exercise record"); }

            try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    long autoGeneratedId = generatedKeys.getLong(1);
                    exerciseRecord.setExRecId(autoGeneratedId);
                    log.info("Auto generated key: {}", autoGeneratedId);
                } else {
                    throw new SQLException("Getting auto generated key failed...");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                ps.close();
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return exerciseRecord;
    }

    @Override
    public ExerciseRecord getById(Long id) {
        return null;
    }

    @Override
    public ExerciseRecord update(ExerciseRecord exerciseRecord) {
        return null;
    }

    @Override
    public void deleteById(Long id) {

    }

    @Override
    public List<ExerciseRecord> getAll() {
        return null;
    }

}
